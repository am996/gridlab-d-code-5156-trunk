// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/Attribute.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include <staff/common/Operation.h>
#include <staff/common/IService.h>
#include <staff/component/ServiceInstanceManager.h>
#include <staff/component/Component.h>
#include "my_controllerImpl.h"
#include "my_controllerWrapper.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}




my_controllerWrapper::my_controllerWrapper(staff::Component* pComponent):
  m_pComponent(pComponent)
{
}

my_controllerWrapper::~my_controllerWrapper()
{
}

void my_controllerWrapper::Invoke(staff::Operation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::DataObject& rRequest = rOperation.Request();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rOperation.SetResponse(GetServiceDescription());
  }
  else
  if (sOperationName == "CreateInstance")
  {
    staff::ServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  if (sOperationName == "FreeInstance")
  {
    staff::ServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                              rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  {
    staff::SharedPtr<my_controllerImpl> tpServiceImpl = GetImpl(sSessionId, sInstanceId);
    if (sOperationName == "COinit")
    {
      double market_init_price = 0;
      int pstate = 0;
      int market_period = 0;
      int control_mode = 0;
      double psetpoint = 0;
      double base_setpoint = 0;
      double heating_base_setpoint = 0;
      double cooling_base_setpoint = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("market_init_price", market_init_price), "Invalid value for element market_init_price");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pstate", pstate), "Invalid value for element pstate");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("market_period", market_period), "Invalid value for element market_period");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("control_mode", control_mode), "Invalid value for element control_mode");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("psetpoint", psetpoint), "Invalid value for element psetpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("base_setpoint", base_setpoint), "Invalid value for element base_setpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("heating_base_setpoint", heating_base_setpoint), "Invalid value for element heating_base_setpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("cooling_base_setpoint", cooling_base_setpoint), "Invalid value for element cooling_base_setpoint");
      rOperation.Result().SetValue(tpServiceImpl->COinit(market_init_price, pstate, market_period, control_mode, psetpoint, base_setpoint, heating_base_setpoint, cooling_base_setpoint));
    }
    else
    if (sOperationName == "COpresync")
    {
      double base_setpoint = 0;
      double psetpoint = 0;
      int control_mode = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("base_setpoint", base_setpoint), "Invalid value for element base_setpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("psetpoint", psetpoint), "Invalid value for element psetpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("control_mode", control_mode), "Invalid value for element control_mode");
      rOperation.Result().SetValue(tpServiceImpl->COpresync(base_setpoint, psetpoint, control_mode));
    }
    else
    if (sOperationName == "COsync")
    {
      double load = 0;
      double demand = 0;
      int pstate = 0;
      double total = 0;
      double target = 0;
      double pAvg = 0;
      double pStd = 0;
      double base_setpoint = 0;
      int control_mode = 0;
      double market_current_frameclearing_price = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("load", load), "Invalid value for element load");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("demand", demand), "Invalid value for element demand");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pstate", pstate), "Invalid value for element pstate");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("total", total), "Invalid value for element total");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("target", target), "Invalid value for element target");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pAvg", pAvg), "Invalid value for element pAvg");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pStd", pStd), "Invalid value for element pStd");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("base_setpoint", base_setpoint), "Invalid value for element base_setpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("control_mode", control_mode), "Invalid value for element control_mode");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("market_current_frameclearing_price", market_current_frameclearing_price), "Invalid value for element market_current_frameclearing_price");
      rOperation.Result().SetValue(tpServiceImpl->COsync(load, demand, pstate, total, target, pAvg, pStd, base_setpoint, control_mode, market_current_frameclearing_price));
    }
    else
    if (sOperationName == "COpostsync")
    {
      int control_mode = 0;
      double base_setpoint = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("control_mode", control_mode), "Invalid value for element control_mode");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("base_setpoint", base_setpoint), "Invalid value for element base_setpoint");
      rOperation.Result().SetValue(tpServiceImpl->COpostsync(control_mode, base_setpoint));
    }
    else
    {
      STAFF_THROW(staff::RemoteException, "Unknown Operation: " + rOperation.GetName());
    }

    rOperation.GetResponse().SetNamespaceUriGenPrefix("http://tempui.org/my_controller");
  }
}

const std::string& my_controllerWrapper::GetName() const
{
  return m_sName;
}

const std::string& my_controllerWrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::Component* my_controllerWrapper::GetComponent() const
{
  return m_pComponent;
}

staff::Component* my_controllerWrapper::GetComponent()
{
  return m_pComponent;
}

staff::PIService& my_controllerWrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::ServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId);
}

staff::PIService my_controllerWrapper::NewImpl()
{
  return new my_controllerImpl;
}

bool my_controllerWrapper::IsLoadAtStartup() const
{
  return false;
}

std::string my_controllerWrapper::GetDependencies() const
{
  return "";
}

staff::DataObject my_controllerWrapper::GetOperations() const
{
  staff::DataObject tOperations("Operations");

  {// Operation: int COinit(double market_init_price, int pstate, int market_period, int control_mode, double psetpoint, double base_setpoint, double heating_base_setpoint, double cooling_base_setpoint)
    staff::DataObject tOpCOinit = tOperations.CreateChild("Operation");
    tOpCOinit.CreateChild("Name", "COinit");
    tOpCOinit.CreateChild("RestMethod", "");
    tOpCOinit.CreateChild("RestLocation", "");
  }
  {// Operation: int COpresync(double base_setpoint, double psetpoint, int control_mode)
    staff::DataObject tOpCOpresync = tOperations.CreateChild("Operation");
    tOpCOpresync.CreateChild("Name", "COpresync");
    tOpCOpresync.CreateChild("RestMethod", "");
    tOpCOpresync.CreateChild("RestLocation", "");
  }
  {// Operation: double COsync(double load, double demand, int pstate, double total, double target, double pAvg, double pStd, double base_setpoint, int control_mode, double market_current_frameclearing_price)
    staff::DataObject tOpCOsync = tOperations.CreateChild("Operation");
    tOpCOsync.CreateChild("Name", "COsync");
    tOpCOsync.CreateChild("RestMethod", "");
    tOpCOsync.CreateChild("RestLocation", "");
  }
  {// Operation: double COpostsync(int control_mode, double base_setpoint)
    staff::DataObject tOpCOpostsync = tOperations.CreateChild("Operation");
    tOpCOpostsync.CreateChild("Name", "COpostsync");
    tOpCOpostsync.CreateChild("RestMethod", "");
    tOpCOpostsync.CreateChild("RestLocation", "");
  }

  return tOperations;
}

staff::DataObject my_controllerWrapper::GetServiceDescription() const
{
  staff::DataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string my_controllerWrapper::m_sName = "my_controller";
const std::string my_controllerWrapper::m_sDescr = "my_controller service";



