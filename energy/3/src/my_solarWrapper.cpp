// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/Attribute.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include <staff/common/Operation.h>
#include <staff/common/IService.h>
#include <staff/component/ServiceInstanceManager.h>
#include <staff/component/Component.h>
#include "my_solarImpl.h"
#include "my_solarWrapper.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}




my_solarWrapper::my_solarWrapper(staff::Component* pComponent):
  m_pComponent(pComponent)
{
}

my_solarWrapper::~my_solarWrapper()
{
}

void my_solarWrapper::Invoke(staff::Operation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::DataObject& rRequest = rOperation.Request();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rOperation.SetResponse(GetServiceDescription());
  }
  else
  if (sOperationName == "CreateInstance")
  {
    staff::ServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  if (sOperationName == "FreeInstance")
  {
    staff::ServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                              rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  {
    staff::SharedPtr<my_solarImpl> tpServiceImpl = GetImpl(sSessionId, sInstanceId);
    if (sOperationName == "solarcreate")
    {
      rOperation.Result().SetValue(tpServiceImpl->solarcreate());
    }
    else
    if (sOperationName == "solarinit")
    {
      int gen_mode_v = 0;
      int gen_status_v = 0;
      int panel_type_v = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("gen_mode_v", gen_mode_v), "Invalid value for element gen_mode_v");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("gen_status_v", gen_status_v), "Invalid value for element gen_status_v");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("panel_type_v", panel_type_v), "Invalid value for element panel_type_v");
      rOperation.Result().SetValue(tpServiceImpl->solarinit(gen_mode_v, gen_status_v, panel_type_v));
    }
    else
    if (sOperationName == "solarsync")
    {
      int t0 = 0;
      int t1 = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("t0", t0), "Invalid value for element t0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("t1", t1), "Invalid value for element t1");
      rOperation.Result().SetValue(tpServiceImpl->solarsync(t0, t1));
    }
    else
    {
      STAFF_THROW(staff::RemoteException, "Unknown Operation: " + rOperation.GetName());
    }

    rOperation.GetResponse().SetNamespaceUriGenPrefix("http://tempui.org/my_solar");
  }
}

const std::string& my_solarWrapper::GetName() const
{
  return m_sName;
}

const std::string& my_solarWrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::Component* my_solarWrapper::GetComponent() const
{
  return m_pComponent;
}

staff::Component* my_solarWrapper::GetComponent()
{
  return m_pComponent;
}

staff::PIService& my_solarWrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::ServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId);
}

staff::PIService my_solarWrapper::NewImpl()
{
  return new my_solarImpl;
}

bool my_solarWrapper::IsLoadAtStartup() const
{
  return false;
}

std::string my_solarWrapper::GetDependencies() const
{
  return "";
}

staff::DataObject my_solarWrapper::GetOperations() const
{
  staff::DataObject tOperations("Operations");

  {// Operation: double solarcreate()
    staff::DataObject tOpsolarcreate = tOperations.CreateChild("Operation");
    tOpsolarcreate.CreateChild("Name", "solarcreate");
    tOpsolarcreate.CreateChild("RestMethod", "");
    tOpsolarcreate.CreateChild("RestLocation", "");
  }
  {// Operation: int solarinit(int gen_mode_v, int gen_status_v, int panel_type_v)
    staff::DataObject tOpsolarinit = tOperations.CreateChild("Operation");
    tOpsolarinit.CreateChild("Name", "solarinit");
    tOpsolarinit.CreateChild("RestMethod", "");
    tOpsolarinit.CreateChild("RestLocation", "");
  }
  {// Operation: double solarsync(int t0, int t1)
    staff::DataObject tOpsolarsync = tOperations.CreateChild("Operation");
    tOpsolarsync.CreateChild("Name", "solarsync");
    tOpsolarsync.CreateChild("RestMethod", "");
    tOpsolarsync.CreateChild("RestLocation", "");
  }

  return tOperations;
}

staff::DataObject my_solarWrapper::GetServiceDescription() const
{
  staff::DataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string my_solarWrapper::m_sName = "my_solar";
const std::string my_solarWrapper::m_sDescr = "my_solar service";



