// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/Attribute.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include <staff/common/Operation.h>
#include <staff/common/IService.h>
#include <staff/component/ServiceInstanceManager.h>
#include <staff/component/Component.h>
#include "my_wind_turbineImpl.h"
#include "my_wind_turbineWrapper.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}




my_wind_turbineWrapper::my_wind_turbineWrapper(staff::Component* pComponent):
  m_pComponent(pComponent)
{
}

my_wind_turbineWrapper::~my_wind_turbineWrapper()
{
}

void my_wind_turbineWrapper::Invoke(staff::Operation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::DataObject& rRequest = rOperation.Request();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rOperation.SetResponse(GetServiceDescription());
  }
  else
  if (sOperationName == "CreateInstance")
  {
    staff::ServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  if (sOperationName == "FreeInstance")
  {
    staff::ServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                              rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  {
    staff::SharedPtr<my_wind_turbineImpl> tpServiceImpl = GetImpl(sSessionId, sInstanceId);
    if (sOperationName == "windturb_dgcreate")
    {
      rOperation.Result().SetValue(tpServiceImpl->windturb_dgcreate());
    }
    else
    if (sOperationName == "windturb_dginit")
    {
      double pLine_I_A_Re = 0;
      double pLine_I_A_Im = 0;
      double pLine_I_B_Re = 0;
      double pLine_I_B_Im = 0;
      double pLine_I_C_Re = 0;
      double pLine_I_C_Im = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pLine_I_A_Re", pLine_I_A_Re), "Invalid value for element pLine_I_A_Re");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pLine_I_A_Im", pLine_I_A_Im), "Invalid value for element pLine_I_A_Im");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pLine_I_B_Re", pLine_I_B_Re), "Invalid value for element pLine_I_B_Re");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pLine_I_B_Im", pLine_I_B_Im), "Invalid value for element pLine_I_B_Im");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pLine_I_C_Re", pLine_I_C_Re), "Invalid value for element pLine_I_C_Re");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pLine_I_C_Im", pLine_I_C_Im), "Invalid value for element pLine_I_C_Im");
      rOperation.Result().SetValue(tpServiceImpl->windturb_dginit(pLine_I_A_Re, pLine_I_A_Im, pLine_I_B_Re, pLine_I_B_Im, pLine_I_C_Re, pLine_I_C_Im));
    }
    else
    if (sOperationName == "windturb_dgsync")
    {
      double pCircuit_V_A_Re = 0;
      double pCircuit_V_A_Im = 0;
      double pCircuit_V_B_Re = 0;
      double pCircuit_V_B_Im = 0;
      double pCircuit_V_C_Re = 0;
      double pCircuit_V_C_Im = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pCircuit_V_A_Re", pCircuit_V_A_Re), "Invalid value for element pCircuit_V_A_Re");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pCircuit_V_A_Im", pCircuit_V_A_Im), "Invalid value for element pCircuit_V_A_Im");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pCircuit_V_B_Re", pCircuit_V_B_Re), "Invalid value for element pCircuit_V_B_Re");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pCircuit_V_B_Im", pCircuit_V_B_Im), "Invalid value for element pCircuit_V_B_Im");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pCircuit_V_C_Re", pCircuit_V_C_Re), "Invalid value for element pCircuit_V_C_Re");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("pCircuit_V_C_Im", pCircuit_V_C_Im), "Invalid value for element pCircuit_V_C_Im");
      rOperation.Result().SetValue(tpServiceImpl->windturb_dgsync(pCircuit_V_A_Re, pCircuit_V_A_Im, pCircuit_V_B_Re, pCircuit_V_B_Im, pCircuit_V_C_Re, pCircuit_V_C_Im));
    }
    else
    if (sOperationName == "windturb_dg_postsync")
    {
      int t0 = 0;
      int t1 = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("t0", t0), "Invalid value for element t0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("t1", t1), "Invalid value for element t1");
      rOperation.Result().SetValue(tpServiceImpl->windturb_dg_postsync(t0, t1));
    }
    else
    {
      STAFF_THROW(staff::RemoteException, "Unknown Operation: " + rOperation.GetName());
    }

    rOperation.GetResponse().SetNamespaceUriGenPrefix("http://tempui.org/my_wind_turbine");
  }
}

const std::string& my_wind_turbineWrapper::GetName() const
{
  return m_sName;
}

const std::string& my_wind_turbineWrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::Component* my_wind_turbineWrapper::GetComponent() const
{
  return m_pComponent;
}

staff::Component* my_wind_turbineWrapper::GetComponent()
{
  return m_pComponent;
}

staff::PIService& my_wind_turbineWrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::ServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId);
}

staff::PIService my_wind_turbineWrapper::NewImpl()
{
  return new my_wind_turbineImpl;
}

bool my_wind_turbineWrapper::IsLoadAtStartup() const
{
  return false;
}

std::string my_wind_turbineWrapper::GetDependencies() const
{
  return "";
}

staff::DataObject my_wind_turbineWrapper::GetOperations() const
{
  staff::DataObject tOperations("Operations");

  {// Operation: double windturb_dgcreate()
    staff::DataObject tOpwindturb_dgcreate = tOperations.CreateChild("Operation");
    tOpwindturb_dgcreate.CreateChild("Name", "windturb_dgcreate");
    tOpwindturb_dgcreate.CreateChild("RestMethod", "");
    tOpwindturb_dgcreate.CreateChild("RestLocation", "");
  }
  {// Operation: int windturb_dginit(double pLine_I_A_Re, double pLine_I_A_Im, double pLine_I_B_Re, double pLine_I_B_Im, double pLine_I_C_Re, double pLine_I_C_Im)
    staff::DataObject tOpwindturb_dginit = tOperations.CreateChild("Operation");
    tOpwindturb_dginit.CreateChild("Name", "windturb_dginit");
    tOpwindturb_dginit.CreateChild("RestMethod", "");
    tOpwindturb_dginit.CreateChild("RestLocation", "");
  }
  {// Operation: double windturb_dgsync(double pCircuit_V_A_Re, double pCircuit_V_A_Im, double pCircuit_V_B_Re, double pCircuit_V_B_Im, double pCircuit_V_C_Re, double pCircuit_V_C_Im)
    staff::DataObject tOpwindturb_dgsync = tOperations.CreateChild("Operation");
    tOpwindturb_dgsync.CreateChild("Name", "windturb_dgsync");
    tOpwindturb_dgsync.CreateChild("RestMethod", "");
    tOpwindturb_dgsync.CreateChild("RestLocation", "");
  }
  {// Operation: int windturb_dg_postsync(int t0, int t1)
    staff::DataObject tOpwindturb_dg_postsync = tOperations.CreateChild("Operation");
    tOpwindturb_dg_postsync.CreateChild("Name", "windturb_dg_postsync");
    tOpwindturb_dg_postsync.CreateChild("RestMethod", "");
    tOpwindturb_dg_postsync.CreateChild("RestLocation", "");
  }

  return tOperations;
}

staff::DataObject my_wind_turbineWrapper::GetServiceDescription() const
{
  staff::DataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string my_wind_turbineWrapper::m_sName = "my_wind_turbine";
const std::string my_wind_turbineWrapper::m_sDescr = "my_wind_turbine service";



