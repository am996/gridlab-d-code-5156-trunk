// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// Service Implementation

#include "my_wheaterImpl.h"
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <iostream>
#include "complex.h"

////////////////////////////////////////////////// defintions


#define TS_NEVER ((int)(((unsigned int)-1)>>1))
#define TSTAT_PRECISION 0.01
#define HEIGHT_PRECISION 0.01
#define TS_SECOND ((int)1000000000) /* duration of one second */


	#define RHOWATER	(62.4)			// lb/cf
	#define CFPGAL		(0.133681)		// cf/gal
	#define GALPCF		(7.4805195)		// gal/cf
	#define CWATER		(0.9994)		// BTU/lb/F
	#define BTUPHPW		(3.4120)		// BTUPH/W
	#define BTUPHPKW	(1e3 * 3.4120)		// BTUPH/kW
	#define KWPBTUPH	(1e-3/BTUPHPW)	// kW/BTUPH
	#define MWPBTUPH	(1e-6/BTUPHPW)	// MW/BTUPH
	#define ROUNDOFF	1e-6			// numerical accuracy for zero in float comparisons

	const double pi = 3.1415926535897931;
	const double Cp = 1;					// Btu/lbm-F

	/* approximate tests */
	#define AEQ(A,B,C) (fabs(A-B)<C)
	#define ANE(A,B,C) (fabs(A-B)>=C)
	#define ALT(A,B,C) (A<=B+C)
	#define AGT(Ak,B,C) (A>=B-C)

	#define MAX(A,B) ((A)>(B)?(A):(B))
#define MIN(A,B) ((A)<(B)?(A):(B))



	double standby_load;
	double time_to_transition;		///< time until next transition [in seconds]

	// Basic characteristics defined at creation...
	double Tset_curtail;			///< lower limit before we cancel curtailment [F]
	double Tinlet;					///< default will be set to 60 degF
	//enumeration location;			///< location of tank (inside or garage) [enum]
//	enumeration heat_mode;				///< method of heating the water (gas or electric) [enum]

	// Characteristics calculated from basics at creation...
	double area;					///< tank cross-sectional area [ft^2]
	double height;					///< tank height [ft]
	double Ton;						///< cut-in temperature [F]
	double Toff;					///< cut-out temperature [F]
	double Cw;						///< thermal mass of water [Btu/F]

	// The primary values we compute in our simultation...
	double h;						///< boundary between hot and cold water layers [ft from top of tank]
	double Tlower;					///< temperature in lower zone of tank (for 2-zone model) [F]
	double Tlower_old;
	double Tupper;					///< temperature in upper zone of tank (for 2-zone model) [F]
	double Tupper_old;
	double Twater;					///< temperature of whole tank (for 1-node model) [F]
	double Tw;						///< water temperature [F]
	double Tw_old;					///< previous water temperature, for internal_gains

	// Convenience values (some pre-computed here and there for efficiency)...
	bool heat_needed;				///< need to maintain this bit of state because of Tstat deadband...
	double is_waterheater_on;		///< Simple logic for determining state of waterheater 1-on, 0-off

	double tank_volume;					///< tank size [gal]
	double tank_UA;						///< tank UA [BTU/hr-F]
	double tank_diameter;				///< tank diameter [ft]
	double water_demand;				///< water draw rate [gpm]
	double water_demand_old;			///< previous water demand, needed for temperature change (reflects heat loss from hot water draw)
	double heating_element_capacity;	///< rated Q of (each) heating element, input in W, converted to[Btu/hr]
	double tank_setpoint;				///< setpoint T of heating element [F]
	double thermostat_deadband;			///< deadband around Tset (half above, half below) [F]
	double *pTair;
	double *pTout;

	double gas_fan_power;		///< fan power draw when a gas waterheater is burning fuel
	double gas_standby_power;	///< standby power draw when a gas waterheater is NOT burning fuel

	double actual_load;
	double prev_load;
	complex waterheater_actual_power;	///< the actual power draw of the object after accounting for voltage


	/* enum model{
			ONENODE,	///< tank model uses a single zone
			TWONODE,	///< tank model uses two zones
			NONE,		///< tank model zoning isn't defined
		} WHMODEL;	///< tank model currently in use
	model current_model;
*/
int current_model;  //0 ONENODE 1 TWONODE 2 NONE
	/* enum flow{
			DEPLETING,	///< tank heat is dropping fast
			RECOVERING, ///< tank heat is rising fast
			STABLE,		///< tank heat is relatively stable
		} ;		///< tank heat flow
	flow load_state; //0 DEPLETING 1 RECOVERING 2 STABLE
	*/
	int load_state; //0 DEPLETING 1 RECOVERING 2 STABLE
/*	 enum location2{
			INSIDE,		///< tank located in conditioned space
			GARAGE,		///< tank located in unconditioned space
		} ;
	location2 location;*/
int location;   //0 insied 1 gargae
/*	 enum state{
			FULL,		///< tank heat is full
			PARTIAL,	///< tank heat is partial
			EMPTY,		///< tank heat is empty
		} ; ///<

	state tank_status;
	*/
int tank_status; //0 full 1 partial 2 empty
/*	 enum heat{
			ELECTRIC,	///< tank heats with an electric resistance element
			GASHEAT		///< tank heats with natural gas
	} ;		///<

	heat heat_mode;
 */
 int heat_mode;  //0 electric 1 gasheat

	struct s_enduse {
		/* the output value must be first for transform to stream */
		/* meter values */
		complex total;				/* total power in kW */
		complex energy;				/* total energy in kWh */
		complex demand;				/* maximum power in kW (can be reset) */

		/* circuit configuration */
		//set config;					/* end-use configuration */
		double breaker_amps;		/* breaker limit (if any) */

		/* zip values */
		complex admittance;			/* constant impedance oprtion of load in kW */
		complex current;			/* constant current portion of load in kW */
		complex power;				/* constant power portion of load in kW */

		/* composite load data */
		//EUMOTOR motor[_EUMT_COUNT];				/* motor loads (A-D) */
		//EUELECTRONIC electronic[_EUET_COUNT];	/* electronic loads (S/D) */

		/* loading */
		double impedance_fraction;	/* constant impedance fraction (pu load) */
		double current_fraction;	/* constant current fraction (pu load) */
		double power_fraction;		/* constant power fraction (pu load)*/
		double power_factor;		/* power factor */
		double voltage_factor;		/* voltage factor (pu nominal) */

		/* heat */
		double heatgain;			/* internal heat from load (Btu/h) */
		double cumulative_heatgain;  /* internal cumulative heat gain from load (Btu) */
		double heatgain_fraction;	/* fraction of power that goes to internal heat (pu Btu/h) */

		/* misc info */
		//char *name;
		//loadshape *shape;
	 int t_last;			/* last time of update */

		// added for backward compatibility with res ENDUSELOAD
		// @todo these are obsolete and must be retrofitted with the above values
		//struct s_object_list *end_obj;

		//struct s_enduse *next;

}load;


/*enum roverride{
	OV_ON = 1,
	OV_NORMAL = 0,
	OV_OFF = 2,
};

roverride re_override;
*/

int re_override;  //0 off 1 on
int power_state;

int check;

double randunit(void)
{
     double u = rand()/(RAND_MAX+1.0);
    if (u<1) return u;
    return randunit();
 }

 double random_normal(double m, double s)
    {
        double r, a, b;
        do {
            a = 2*randunit()-1;
            b = 2*randunit()-1;
            r = a*a+b*b;
        } while (r>=1);
        return sqrt(-2*log(r)/r)*a*r*s+m;
    }


double clip(double n, double lower, double upper) {
  return std::max(lower, std::min(n, upper));
}


my_wheaterImpl::my_wheaterImpl()
{
}

my_wheaterImpl::~my_wheaterImpl()
{
}

void my_wheaterImpl::OnCreate()
{
  // this function is called when service instance is created and registered
}

void my_wheaterImpl::OnDestroy()
{
  // this function is called immediately before service instance destruction
}

int my_wheaterImpl::WHcreate()
{
 // initialize public values
 	tank_volume = 50.0;
 	tank_UA = 0.0;
 	tank_diameter	= 1.5;  // All heaters are 1.5-ft wide for now...
 	Tinlet = 60.0;		// default set here, but published by the model for users to set this value
 	water_demand = 0.0;	// in gpm
 	heating_element_capacity = 0.0;
 	heat_needed = false;
 	location = 1;
 	heat_mode = 0;
 	tank_setpoint = 0.0;
 	thermostat_deadband = 0.0;
 	is_waterheater_on = 0;
 //	power_kw = complex(0,0);
 	Tw = 0.0;

 	// location...mostly in garage, a few inside...
 	location = 1; // INSIDE;

 	// initialize randomly distributed values
 	tank_setpoint 		= clip(random_normal(1,130),100,160);
 	thermostat_deadband	= clip(random_normal(5,1),1,10);

 	/* initialize water tank thermostat */
 	tank_setpoint = random_normal(125,5);
 	if (tank_setpoint<90) tank_setpoint = 90;
 	if (tank_setpoint>160) tank_setpoint = 160;

 	/* initialize water tank deadband */
 	thermostat_deadband = fabs(random_normal(2,1))+1;
 	if (thermostat_deadband>10)
 		thermostat_deadband = 10;

 	tank_UA = clip(random_normal(2.0, 0.20),0.1,10 )* tank_volume/50;
 	if(tank_UA <= 1.0)
 		tank_UA = 2.0;	// "R-13"

 	// name of enduse
 	//load.name = oclass->name;

 	load.breaker_amps = 30;
 	//load.config = EUC_IS220;
 	load.power_fraction = 0.0;
 	load.impedance_fraction = 1.0;
 	load.heatgain_fraction = 0.0; /* power has no effect on heat loss */
    load.voltage_factor=1.0;
load.admittance=complex(4,0);

 	gas_fan_power = -1.0;
	gas_standby_power = -1.0;
check=100;
  return 0;  // result
c
}

int my_wheaterImpl::WHinit()
{
  // TODO: place your code here
 static double sTair = 74;
  	static double sTout = 68;

      //auta mporei na ta parei kai apo allo web service
      pTair = &sTair;
      pTout = &sTout;


printf("fhjdshfslfslfsfsdfsd %d ",check);

      if(tank_volume <= 0.0){
      //		tank_volume = 5*floor((1.0/5.0)*(rand()%1.10+ 0.90) * 50.0 * (pHouse->get_floor_area() /2000.0));  // [gal]
      		if (tank_volume > 100.0)
      			tank_volume = 100.0;
      		else if (tank_volume < 20.0)
      			tank_volume = 20.0;
      	} else {
      		if (tank_volume > 100.0 || tank_volume < 20.0){
      		//return 0;
      			//gl_error("watertank volume of %f outside the volume bounds of 20 to 100 gallons.", tank_volume);
      			/*	TROUBLESHOOT
      				All waterheaters must be set between 40 and 100 gallons.  Most waterheaters are assumed to be 50 gallon tanks.
      			*/
      		}
	}


		if (tank_setpoint<90 || tank_setpoint>160){

			return 0;
			//gl_error("watertank thermostat is set to %f and is outside the bounds of 90 to 160 degrees Fahrenheit (32.2 - 71.1 Celsius).", tank_setpoint);
			/*	TROUBLESHOOT
				All waterheaters must be set between 90 degF and 160 degF.*/
			}
		/* initialize water tank deadband */
		if (thermostat_deadband>10 || thermostat_deadband < 0.0){
		//return 0;
			//GL_THROW("watertank deadband of %f is outside accepted bounds of 0 to 10 degrees (5.6 degC).", thermostat_deadband);
	}
		// initial tank UA
		if (tank_UA <= 0.0){
		//return 0;
		//	GL_THROW("Tank UA value is negative.");

	}
		// Set heating element capacity if not provided by the user
		if (heating_element_capacity <= 0.0)
		{
			if (tank_volume >= 50)
				heating_element_capacity = 4.500;
			else
			{
				// Smaller tanks can be either 3200, 3500, or 4500...
				double randVal = (double)rand()/(1.0+0.0);
				if (randVal < 0.33)
					heating_element_capacity = 3.200;
				else if (randVal < 0.67)
					heating_element_capacity = 3.500;
				else
					heating_element_capacity = 4.500;
			}
		}

		// set gas electric loads, if not provided by the user
		if(0 > gas_fan_power){
			gas_fan_power = heating_element_capacity * 0.01;
		}

		if(0 > gas_standby_power){
			gas_standby_power = 0.0; // some units consume 3-5W
		}

		// Other initial conditions

		if(Tw < Tinlet){ // uninit'ed temperature
			Tw = (double)rand()/((tank_setpoint + thermostat_deadband) +(tank_setpoint - thermostat_deadband));
		}
		current_model = 2;


		load_state = 2;

		// initial demand
		Tset_curtail	= tank_setpoint - thermostat_deadband/2 - 10;  // Allow T to drop only 10 degrees below lower cut-in T...

		// Setup derived characteristics...
		area 		= (pi * pow(tank_diameter,2))/4;
		height 		= tank_volume/GALPCF / area;
		Cw 			= tank_volume/GALPCF * RHOWATER * Cp;  // [Btu/F]

		h = height;

		// initial water temperature
		if(h == 0){
			// discharged
			Tlower = Tinlet;
			Tupper = Tinlet + TSTAT_PRECISION;
		} else {
			Tlower = Tinlet;
		}



  return 0;  // result

}

int my_wheaterImpl::WHsync(int t0, int t1, double heating_element_capacity, double temperature, double tank_setpoint, double tank_UA, double water_demand, double tank_volume, double thermostat_deadband)
{
  int tResult;
  double internal_gain = 0.0;
  	//double nHours = (gl_tohours(t1) - gl_tohours(t0))/TS_SECOND;
  	double Tamb = WHget_Tambient();
    re_override =t0;
  	// use re_override to control heat_needed state
  	// runs after thermostat() but before "the usual" calculations
  	if(re_override == 1){
  		heat_needed = true;
  	} else if(re_override == 0){
  		heat_needed = false;
  	}

  	if(Tw > 212.0 - thermostat_deadband){ // if it's trying boil, turn it off!
  		heat_needed = false;
  		is_waterheater_on = 0;
  	}


  	//TIMESTAMP t2 = residential_enduse::sync(t0,t1);

  	// Now find our current temperatures and boundary height...
  	// And compute the time to the next transition...
  	//Adjusted because shapers go on sync, not presync

  	WHset_time_to_transition();

  	// determine internal gains
  	if (location == 0){
  		if(current_model == 0){
  			internal_gain = tank_UA * (Tw - WHget_Tambient());
  		} else if(current_model == 1){
  			internal_gain = tank_UA * (Tw - Tamb) * h / height;
  			internal_gain += tank_UA * (Tlower - Tamb) * (1 - h / height);
  		}
  	} else {
  		internal_gain = 0;
  	}

  	// determine the power used
  	if (heat_needed == true){
  		/* power_kw */ load.total = (heat_mode == 1 ? gas_fan_power : heating_element_capacity);

  		is_waterheater_on = 1;
  	} else {
  		/* power_kw */ load.total = (heat_mode == 1 ? gas_standby_power : 0.0);
  		is_waterheater_on = 0;
  	}
//printf("antoniaaaaaaa:%f  %f %f\n",is_waterheater_on,actual_load,load.total.Re());
  	//load.total = load.power = /* power_kw */ load.power;
  	load.power = load.total * load.power_fraction;
  	load.admittance = load.total * load.impedance_fraction;
  	load.current = load.total * load.current_fraction;
  	load.heatgain = internal_gain;

  	waterheater_actual_power = load.power + (load.current + load.admittance * load.voltage_factor )* load.voltage_factor;
  	actual_load = waterheater_actual_power.Re();

  	if (actual_load != 0.0)
  	{
  		prev_load = actual_load;
  		power_state =1;
  	}
  	else
  		power_state =0;

  //	gl_enduse_sync(&(residential_enduse::load),t1);

  	if(re_override == 2){
  		if (time_to_transition >= (1.0/3600.0))	// 0.0167 represents one second
  		{
  			int  t_to_trans = (int)(t1+time_to_transition*3600.0/TS_SECOND);
  		//	TIMESTAMP t_to_trans = (TIMESTAMP)(t1+time_to_transition*3600.0/TS_SECOND);
  		//	return -(t_to_trans); // negative means soft transition
  		}
  		// less than one second means never
  		//else
  			//return TS_NEVER;
  	} //else {
  		//return TS_NEVER; // keep running until the forced state ends
  	//}
//int t5=8;


//t0=(int)load.total.Re();
  return (int)load.total.Re();  // result

}

int my_wheaterImpl::WHcommit()
{
 	Tw_old = Tw;
 	Tupper_old = /*Tupper*/ Tw;
 	Tlower_old = Tlower;
 	water_demand_old = water_demand;
	return TS_NEVER;

}

int my_wheaterImpl::WHtank_state()
{
  if ( h >= height-HEIGHT_PRECISION )
  		return 0;
  	else if ( h <= HEIGHT_PRECISION)
  		return 2;
  	else
		return 1;

}

int my_wheaterImpl::WHpostsync()
{
	return TS_NEVER;
}

void my_wheaterImpl::WHset_time_to_transition()
{
  // set the model and load state
  	WHset_current_model_and_load_state();

  	time_to_transition = -1;
//printf("WHset_time_to_transition....\n");
  	switch (current_model) {
  		case 0:
  			if (heat_needed == false)
  				time_to_transition = WHnew_time_1node(Tw, Ton);
  			else if (load_state == 1)
  				time_to_transition = WHnew_time_1node(Tw, Toff);
  			else
  				time_to_transition = -1;
  			break;

  		case 1:
  			switch (load_state) {
  				case 2:
  					time_to_transition = -1; // Negative implies TS_NEVER;
  					break;
  				case 0:
  					time_to_transition = WHnew_time_2zone(h, 0);
  					break;
  				case 1:
  					time_to_transition = WHnew_time_2zone(h, height);
  					break;
  			}
  	}
	//return;

}

int my_wheaterImpl::WHset_current_model_and_load_state()
{
  if (/*Tupper*/ Tw - Tlower < ROUNDOFF)
  		return 0.0; // if /*Tupper*/ Tw and Tlower are same then dh/dt = 0.0;

  	// Pre-set some algebra just for efficiency...
  	const double mdot = water_demand * 60 * RHOWATER / GALPCF;		// lbm/hr...
      const double c1 = RHOWATER * Cp * area * (/*Tupper*/ Tw - Tlower);	// Btu/ft...
	//printf("WHset_current_model_and_load_state :\n ");
      // check c1 before dividing by it
      if (c1 <= ROUNDOFF)
          return 0.0; //Possible only when /*Tupper*/ Tw and Tlower are very close, and the difference is negligible

  	const double cA = -mdot / (RHOWATER * area) + (WHactual_kW() * BTUPHPKW + tank_UA * (WHget_Tambient() - Tlower)) / c1;
  	const double cb = (tank_UA / height) * (/*Tupper*/ Tw - Tlower) / c1;

  	// Returns the rate of change of 'h'

	return cA - cb*h;

}

double my_wheaterImpl::WHdhdt(double h)
{
  double dhdt_now = WHdhdt(h);
  	double dhdt_full = WHdhdt(height);
  	double dhdt_empty = WHdhdt(0.0);
  	current_model = 2;		// by default set it to onenode
  	load_state = 2;		// by default

  	int  tank_status = WHtank_state();

  	switch(tank_status)
  	{
  		case 2:
  			if (dhdt_empty <= 0.0)
  			{
  				// If the tank is empty, a negative dh/dt means we're still
  				// drawing water, so we'll be switching to the 1-zone model...

  				/* original plan */
  				//current_model = NONE;
  				//load_state = DEPLETING;

  				current_model = 0;
  				load_state = 0;
  				Tw = Tupper = Tinlet + HEIGHT_PRECISION;
  				Tlower = Tinlet;
  				h = height;
  				/* empty of hot water? full of cold water! */
  				/* it is reconized that this causes a discontinuous jump in the water temperature.
  				 * despite that, energy is mostly conserved, since Q => dh until h = 0 (thus no heat in the water).
  				 * the +0.01 degF fudge factor for the WHdhdt() T_diff=0 catch adds about 0.05% of a tank of heat,
  				 * less than expected errors from other sources. */
  			}
  			else if (dhdt_full > 0)
  			{
  				// overriding the plc code ignoring thermostat logic
  				// heating will always be on while in two zone model
  				heat_needed = true;
  				current_model = 1;
  				load_state = 1;
  			}
  			else
  				load_state = 2;
  			break;

  		case 0:
  			// If the tank is full, a negative dh/dt means we're depleting, so
  			// we'll also be switching to the 2-zone model...
  			if (dhdt_full < 0)
  			{
  				// overriding the plc code ignoring thermostat logic
  				// heating will always be on while in two zone model
  				bool cur_heat_needed = heat_needed;
  				heat_needed = true;
  				double dhdt_full_temp = WHdhdt(height);
  				if (re_override == 0)
  				{
  					current_model = 0;
  					load_state = 0;
  					heat_needed = false;
  				}
  				else if (dhdt_full_temp < 0)
  				{
  					current_model = 1;
  					load_state = 0;
  				}
  				else
  				{
  					current_model = 0;

  					heat_needed = cur_heat_needed;
  					load_state = heat_needed ? 1 : 0;
  				}
  			}
  			else if (dhdt_empty > 0)
  			{
  				current_model = 0;
  				load_state = 1;
  			}
  			else
  				load_state = 2;
  			break;

  		case 1:
  			// We're definitely in 2-zone mode.  We have to watch for the
  			// case where h's movement stalls out...
  			current_model = 1;
  			// overriding the plc code ignoring thermostat logic
  			// heating will always be on while in two zone model
  			heat_needed = true;

  			if (dhdt_now < 0 && (dhdt_now * dhdt_empty) >= 0)
  				load_state = 0;
  			else if (dhdt_now > 0 && (dhdt_now * dhdt_full) >= 0)
  				load_state = 1;
  			else
  			{
  				// dhdt_now is 0, so nothing's happening...
  				current_model = 2;
  				load_state = 2;
  			}
  			break;
  	}

	return load_state;

}

double my_wheaterImpl::WHactual_kW()
{
  const double nominal_voltage = 240.0; //@TODO:  Determine if this should be published or how we want to obtain this from the equipment/network
      static int trip_counter = 0;

  	// calculate rated heat capacity adjusted for the current line voltage
  	if (heat_needed && re_override != 0)
      {
  		if(heat_mode == 1){
  			return heating_element_capacity; /* gas heating is voltage independent. */
  		}
  		const double actual_voltage =  nominal_voltage;
          if (actual_voltage > 2.0*nominal_voltage)
          {
              if (trip_counter++ > 10)
  				return 0;
  				//GL_THROW("Water heater line voltage for waterheater:%d is too high, exceeds twice nominal voltage.",obj->id);
  			/*	TROUBLESHOOT
  				The waterheater is receiving twice the nominal voltage consistantly, or about 480V on what
  				should be a 240V circuit.  Please sanity check your powerflow model as it feeds to the
  				meter and to the house.
  			*/
              else
                  return 0.0;         // @TODO:  This condition should trip the breaker with a counter
          }
  		double test = heating_element_capacity * (actual_voltage*actual_voltage) / (nominal_voltage*nominal_voltage);
  		return test;
      }
  	else
		return 0.0;

}

double my_wheaterImpl::WHnew_time_1node(double T0, double T1)
{
  const double mdot_Cp = Cp * water_demand * 60 * RHOWATER / GALPCF;

      if (Cw <= ROUNDOFF)
          return -1.0;

  	const double c1 = ((WHactual_kW()*BTUPHPKW + tank_UA * WHget_Tambient()) + mdot_Cp*Tinlet) / Cw;
  	const double c2 = -(tank_UA + mdot_Cp) / Cw;

      if (fabs(c1 + c2*T1) <= ROUNDOFF || fabs(c1 + c2*T0) <= ROUNDOFF || fabs(c2) <= ROUNDOFF)
          return -1.0;

  	const double new_time = (log(fabs(c1 + c2 * T1)) - log(fabs(c1 + c2 * T0))) / c2;	// [hr]
	return new_time;

}

double my_wheaterImpl::WHnew_temp_1node(double T0, double delta_t)
{
  // old because this happens in presync and needs previously used demand
  	const double mdot_Cp = Cp * water_demand_old * 60 * RHOWATER / GALPCF;
  	// Btu / degF.lb * gal/hr * lb/cf * cf/gal = Btu / degF.hr

      if (Cw <= ROUNDOFF || (tank_UA+mdot_Cp) <= ROUNDOFF)
          return T0;

  	const double c1 = (tank_UA + mdot_Cp) / Cw;
  	const double c2 = (WHactual_kW()*BTUPHPKW + mdot_Cp*Tinlet + tank_UA*WHget_Tambient()) / (tank_UA + mdot_Cp);

  //	return  c2 - (c2 + T0) * exp(c1 * delta_t);	// [F]
	return  c2 - (c2 - T0) * exp(-c1 * delta_t);	// [F]

}

double my_wheaterImpl::WHnew_time_2zone(double h0, double h1)
{
  const double c0 = RHOWATER * Cp * area * (/*Tupper*/ Tw - Tlower);
  	double dhdt0, dhdt1;

      if (fabs(c0) <= ROUNDOFF || height <= ROUNDOFF)
          return -1.0;    // c0 or height should never be zero.  if one of these is zero, there is no definite time to transition

  	const double cb = (tank_UA / height) * (/*Tupper*/ Tw - Tlower) / c0;

      if (fabs(cb) <= ROUNDOFF)
          return -1.0;
  	dhdt1 = fabs(WHdhdt(h1));
  	dhdt0 = fabs(WHdhdt(h0));
  	double last_timestep = (log(dhdt1) - log(dhdt0)) / -cb;	// [hr]
	return last_timestep;

}

double my_wheaterImpl::WHnew_h_2zone(double h0, double delta_t)
{
 if (delta_t <= ROUNDOFF)
 		return h0;

 	// old because this happens in presync and needs previously used demand
 	const double mdot = water_demand_old * 60 * RHOWATER / GALPCF;		// lbm/hr...
 	const double c1 = RHOWATER * Cp * area * (/*Tupper*/ Tw - Tlower); // lb/ft^3 * ft^2 * degF * Btu/lb.degF = lb/lb * ft^2/ft^3 * degF/degF * Btu = Btu/ft

 	// check c1 before division
 	if (fabs(c1) <= ROUNDOFF)
         return height;      // if /*Tupper*/ Tw and Tlower are real close, then the new height is the same as tank height
 //		throw MODEL_NOT_2ZONE;

 //	#define CWATER		(0.9994)		// BTU/lb/F
 	const double cA = -mdot / (RHOWATER * area) + (WHactual_kW()*BTUPHPKW + tank_UA * (WHget_Tambient() - Tlower)) / c1;
 	// lbm/hr / lb/ft + kW * Btu.h/kW +
 	const double cb = (tank_UA / height) * (/*Tupper*/ Tw - Tlower) / c1;

     if (fabs(cb) <= ROUNDOFF)
         return height;

	return ((exp(cb * delta_t) * (cA + cb * h0)) - cA) / cb;	// [ft]
}

double my_wheaterImpl::WHget_Tambient()
{
  double ratio;

  		ratio = 0.5;



  	// return temperature of location
  	//house *pHouse = OBJECTDATA(OBJECTHDR(this)->parent,house);
  	//return pHouse->get_Tair()*ratio + pHouse->get_Tout()*(1-ratio);
	return *pTair * ratio + *pTout *(1-ratio);

}



