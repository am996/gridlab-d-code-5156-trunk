// This file generated by staff_codegen
// For more information please visit: http://code.google.com/p/staff/
// DO NOT EDIT

#include <staff/utils/SharedPtr.h>
#include <staff/utils/Log.h>
#include <staff/utils/fromstring.h>
#include <staff/utils/tostring.h>
#include <staff/utils/HexBinary.h>
#include <staff/utils/Base64Binary.h>
#include <staff/common/Attribute.h>
#include <staff/common/Exception.h>
#include <staff/common/DataObject.h>
#include <staff/common/Operation.h>
#include <staff/common/IService.h>
#include <staff/component/ServiceInstanceManager.h>
#include <staff/component/Component.h>
#include "my_wheaterImpl.h"
#include "my_wheaterWrapper.h"

namespace staff
{

///////////////////////////////////////////////////////////////////////////////////////////////////////
// typedef deserializators
}




my_wheaterWrapper::my_wheaterWrapper(staff::Component* pComponent):
  m_pComponent(pComponent)
{
}

my_wheaterWrapper::~my_wheaterWrapper()
{
}

void my_wheaterWrapper::Invoke(staff::Operation& rOperation, const std::string& sSessionId, const std::string& sInstanceId)
{
  const staff::DataObject& rRequest = rOperation.Request();
  const std::string& sOperationName = rOperation.GetName();

  if (sOperationName == "GetServiceDescription")
  {
    rOperation.SetResponse(GetServiceDescription());
  }
  else
  if (sOperationName == "CreateInstance")
  {
    staff::ServiceInstanceManager::Inst().CreateServiceInstance(sSessionId, m_sName,
                                                                rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  if (sOperationName == "FreeInstance")
  {
    staff::ServiceInstanceManager::Inst().FreeServiceInstance(sSessionId, m_sName,
                                                              rRequest.GetChildTextByLocalName("sInstanceId"));
  }
  else
  {
    staff::SharedPtr<my_wheaterImpl> tpServiceImpl = GetImpl(sSessionId, sInstanceId);
    if (sOperationName == "WHcreate")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHcreate());
    }
    else
    if (sOperationName == "WHinit")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHinit());
    }
    else
    if (sOperationName == "WHsync")
    {
      int t0 = 0;
      int t1 = 0;
      double heating_element_capacity = 0;
      double temperature = 0;
      double tank_setpoint = 0;
      double tank_UA = 0;
      double water_demand = 0;
      double tank_volume = 0;
      double thermostat_deadband = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("t0", t0), "Invalid value for element t0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("t1", t1), "Invalid value for element t1");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("heating_element_capacity", heating_element_capacity), "Invalid value for element heating_element_capacity");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("temperature", temperature), "Invalid value for element temperature");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("tank_setpoint", tank_setpoint), "Invalid value for element tank_setpoint");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("tank_UA", tank_UA), "Invalid value for element tank_UA");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("water_demand", water_demand), "Invalid value for element water_demand");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("tank_volume", tank_volume), "Invalid value for element tank_volume");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("thermostat_deadband", thermostat_deadband), "Invalid value for element thermostat_deadband");
      rOperation.Result().SetValue(tpServiceImpl->WHsync(t0, t1, heating_element_capacity, temperature, tank_setpoint, tank_UA, water_demand, tank_volume, thermostat_deadband));
    }
    else
    if (sOperationName == "WHcommit")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHcommit());
    }
    else
    if (sOperationName == "WHtank_state")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHtank_state());
    }
    else
    if (sOperationName == "WHpostsync")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHpostsync());
    }
    else
    if (sOperationName == "WHset_time_to_transition")
    {
      tpServiceImpl->WHset_time_to_transition();
    }
    else
    if (sOperationName == "WHset_current_model_and_load_state")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHset_current_model_and_load_state());
    }
    else
    if (sOperationName == "WHdhdt")
    {
      double h = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("h", h), "Invalid value for element h");
      rOperation.Result().SetValue(tpServiceImpl->WHdhdt(h));
    }
    else
    if (sOperationName == "WHactual_kW")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHactual_kW());
    }
    else
    if (sOperationName == "WHnew_time_1node")
    {
      double T0 = 0;
      double T1 = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("T0", T0), "Invalid value for element T0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("T1", T1), "Invalid value for element T1");
      rOperation.Result().SetValue(tpServiceImpl->WHnew_time_1node(T0, T1));
    }
    else
    if (sOperationName == "WHnew_temp_1node")
    {
      double T0 = 0;
      double delta_t = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("T0", T0), "Invalid value for element T0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("delta_t", delta_t), "Invalid value for element delta_t");
      rOperation.Result().SetValue(tpServiceImpl->WHnew_temp_1node(T0, delta_t));
    }
    else
    if (sOperationName == "WHnew_time_2zone")
    {
      double h0 = 0;
      double h1 = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("h0", h0), "Invalid value for element h0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("h1", h1), "Invalid value for element h1");
      rOperation.Result().SetValue(tpServiceImpl->WHnew_time_2zone(h0, h1));
    }
    else
    if (sOperationName == "WHnew_h_2zone")
    {
      double h0 = 0;
      double delta_t = 0;
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("h0", h0), "Invalid value for element h0");
      STAFF_ASSERT(rRequest.GetChildValueByLocalName("delta_t", delta_t), "Invalid value for element delta_t");
      rOperation.Result().SetValue(tpServiceImpl->WHnew_h_2zone(h0, delta_t));
    }
    else
    if (sOperationName == "WHget_Tambient")
    {
      rOperation.Result().SetValue(tpServiceImpl->WHget_Tambient());
    }
    else
    {
      STAFF_THROW(staff::RemoteException, "Unknown Operation: " + rOperation.GetName());
    }

    rOperation.GetResponse().SetNamespaceUriGenPrefix("http://tempui.org/my_wheater");
  }
}

const std::string& my_wheaterWrapper::GetName() const
{
  return m_sName;
}

const std::string& my_wheaterWrapper::GetDescr() const
{
  return m_sDescr;
}

const staff::Component* my_wheaterWrapper::GetComponent() const
{
  return m_pComponent;
}

staff::Component* my_wheaterWrapper::GetComponent()
{
  return m_pComponent;
}

staff::PIService& my_wheaterWrapper::GetImpl(const std::string& sSessionId, const std::string& sInstanceId)
{
  return staff::ServiceInstanceManager::Inst().GetServiceInstance(sSessionId, m_sName, sInstanceId);
}

staff::PIService my_wheaterWrapper::NewImpl()
{
  return new my_wheaterImpl;
}

bool my_wheaterWrapper::IsLoadAtStartup() const
{
  return false;
}

std::string my_wheaterWrapper::GetDependencies() const
{
  return "";
}

staff::DataObject my_wheaterWrapper::GetOperations() const
{
  staff::DataObject tOperations("Operations");

  {// Operation: int WHcreate()
    staff::DataObject tOpWHcreate = tOperations.CreateChild("Operation");
    tOpWHcreate.CreateChild("Name", "WHcreate");
    tOpWHcreate.CreateChild("RestMethod", "");
    tOpWHcreate.CreateChild("RestLocation", "");
  }
  {// Operation: int WHinit()
    staff::DataObject tOpWHinit = tOperations.CreateChild("Operation");
    tOpWHinit.CreateChild("Name", "WHinit");
    tOpWHinit.CreateChild("RestMethod", "");
    tOpWHinit.CreateChild("RestLocation", "");
  }
  {// Operation: int WHsync(int t0, int t1, double heating_element_capacity, double temperature, double tank_setpoint, double tank_UA, double water_demand, double tank_volume, double thermostat_deadband)
    staff::DataObject tOpWHsync = tOperations.CreateChild("Operation");
    tOpWHsync.CreateChild("Name", "WHsync");
    tOpWHsync.CreateChild("RestMethod", "");
    tOpWHsync.CreateChild("RestLocation", "");
  }
  {// Operation: int WHcommit()
    staff::DataObject tOpWHcommit = tOperations.CreateChild("Operation");
    tOpWHcommit.CreateChild("Name", "WHcommit");
    tOpWHcommit.CreateChild("RestMethod", "");
    tOpWHcommit.CreateChild("RestLocation", "");
  }
  {// Operation: int WHtank_state()
    staff::DataObject tOpWHtank_state = tOperations.CreateChild("Operation");
    tOpWHtank_state.CreateChild("Name", "WHtank_state");
    tOpWHtank_state.CreateChild("RestMethod", "");
    tOpWHtank_state.CreateChild("RestLocation", "");
  }
  {// Operation: int WHpostsync()
    staff::DataObject tOpWHpostsync = tOperations.CreateChild("Operation");
    tOpWHpostsync.CreateChild("Name", "WHpostsync");
    tOpWHpostsync.CreateChild("RestMethod", "");
    tOpWHpostsync.CreateChild("RestLocation", "");
  }
  {// Operation: void WHset_time_to_transition()
    staff::DataObject tOpWHset_time_to_transition = tOperations.CreateChild("Operation");
    tOpWHset_time_to_transition.CreateChild("Name", "WHset_time_to_transition");
    tOpWHset_time_to_transition.CreateChild("RestMethod", "");
    tOpWHset_time_to_transition.CreateChild("RestLocation", "");
  }
  {// Operation: int WHset_current_model_and_load_state()
    staff::DataObject tOpWHset_current_model_and_load_state = tOperations.CreateChild("Operation");
    tOpWHset_current_model_and_load_state.CreateChild("Name", "WHset_current_model_and_load_state");
    tOpWHset_current_model_and_load_state.CreateChild("RestMethod", "");
    tOpWHset_current_model_and_load_state.CreateChild("RestLocation", "");
  }
  {// Operation: double WHdhdt(double h)
    staff::DataObject tOpWHdhdt = tOperations.CreateChild("Operation");
    tOpWHdhdt.CreateChild("Name", "WHdhdt");
    tOpWHdhdt.CreateChild("RestMethod", "");
    tOpWHdhdt.CreateChild("RestLocation", "");
  }
  {// Operation: double WHactual_kW()
    staff::DataObject tOpWHactual_kW = tOperations.CreateChild("Operation");
    tOpWHactual_kW.CreateChild("Name", "WHactual_kW");
    tOpWHactual_kW.CreateChild("RestMethod", "");
    tOpWHactual_kW.CreateChild("RestLocation", "");
  }
  {// Operation: double WHnew_time_1node(double T0, double T1)
    staff::DataObject tOpWHnew_time_1node = tOperations.CreateChild("Operation");
    tOpWHnew_time_1node.CreateChild("Name", "WHnew_time_1node");
    tOpWHnew_time_1node.CreateChild("RestMethod", "");
    tOpWHnew_time_1node.CreateChild("RestLocation", "");
  }
  {// Operation: double WHnew_temp_1node(double T0, double delta_t)
    staff::DataObject tOpWHnew_temp_1node = tOperations.CreateChild("Operation");
    tOpWHnew_temp_1node.CreateChild("Name", "WHnew_temp_1node");
    tOpWHnew_temp_1node.CreateChild("RestMethod", "");
    tOpWHnew_temp_1node.CreateChild("RestLocation", "");
  }
  {// Operation: double WHnew_time_2zone(double h0, double h1)
    staff::DataObject tOpWHnew_time_2zone = tOperations.CreateChild("Operation");
    tOpWHnew_time_2zone.CreateChild("Name", "WHnew_time_2zone");
    tOpWHnew_time_2zone.CreateChild("RestMethod", "");
    tOpWHnew_time_2zone.CreateChild("RestLocation", "");
  }
  {// Operation: double WHnew_h_2zone(double h0, double delta_t)
    staff::DataObject tOpWHnew_h_2zone = tOperations.CreateChild("Operation");
    tOpWHnew_h_2zone.CreateChild("Name", "WHnew_h_2zone");
    tOpWHnew_h_2zone.CreateChild("RestMethod", "");
    tOpWHnew_h_2zone.CreateChild("RestLocation", "");
  }
  {// Operation: double WHget_Tambient()
    staff::DataObject tOpWHget_Tambient = tOperations.CreateChild("Operation");
    tOpWHget_Tambient.CreateChild("Name", "WHget_Tambient");
    tOpWHget_Tambient.CreateChild("RestMethod", "");
    tOpWHget_Tambient.CreateChild("RestLocation", "");
  }

  return tOperations;
}

staff::DataObject my_wheaterWrapper::GetServiceDescription() const
{
  staff::DataObject tServiceDescription;

  tServiceDescription.Create("ServiceDescription");
  tServiceDescription.DeclareDefaultNamespace("http://tempui.org/staff/service-description");

  tServiceDescription.CreateChild("Name", m_sName);
  tServiceDescription.CreateChild("Description", m_sDescr);

  tServiceDescription.AppendChild(GetOperations());

  return tServiceDescription;
}

const std::string my_wheaterWrapper::m_sName = "my_wheater";
const std::string my_wheaterWrapper::m_sDescr = "my_wheater service";



